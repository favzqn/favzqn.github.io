---
import ToolLayout from '@/layouts/ToolLayout.astro'
---

<ToolLayout title="Password Generator" description="Create secure passwords with custom rules">

    <div class="password-container">
      <div class="controls-section">
        <div class="section-header">
          <h3>Settings</h3>
        </div>

        <div class="settings-group">
          <label for="passwordLength">Length</label>
          <div class="length-control">
            <input id="passwordLength" type="range" min="8" max="64" value="16" class="slider" />
            <span id="lengthDisplay">16</span>
          </div>
        </div>

        <div class="checkbox-group">
          <label class="checkbox">
            <input type="checkbox" id="uppercase" checked />
            <span>Uppercase (A-Z)</span>
          </label>
          <label class="checkbox">
            <input type="checkbox" id="lowercase" checked />
            <span>Lowercase (a-z)</span>
          </label>
          <label class="checkbox">
            <input type="checkbox" id="numbers" checked />
            <span>Numbers (0-9)</span>
          </label>
          <label class="checkbox">
            <input type="checkbox" id="symbols" checked />
            <span>Symbols (!@#$%...)</span>
          </label>
          <label class="checkbox">
            <input type="checkbox" id="excludeAmbiguous" />
            <span>Exclude Ambiguous (i, l, 1, L, o, 0, O, etc.)</span>
          </label>
        </div>

        <div class="button-group">
          <button id="generateBtn" class="btn btn-primary">Generate</button>
          <button id="clearBtn" class="btn btn-secondary">Clear</button>
        </div>
      </div>

      <div class="results-section">
        <div class="section-header">
          <h3>Generated Password</h3>
        </div>

        <div class="password-display-box">
          <div id="passwordDisplay" class="password-display">-</div>
          <button id="copyBtn" class="copy-btn">Copy</button>
        </div>

        <div class="strength-meter">
          <div class="strength-label">Strength: <span id="strengthText">—</span></div>
          <div class="strength-bar">
            <div id="strengthBar" class="strength-fill"></div>
          </div>
        </div>

        <div class="history-section">
          <div class="section-header">
            <h3>History</h3>
            <button id="clearHistoryBtn" class="btn btn-secondary">Clear</button>
          </div>
          <div id="historyList" class="history-list">
            <div class="empty-history">No passwords generated yet</div>
          </div>
        </div>
      </div>
    </div>
</ToolLayout>

<style>
  .password-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    margin-top: 2rem;
  }

  @media (max-width: 1024px) {
    .password-container {
      grid-template-columns: 1fr;
    }
  }

  .controls-section, .results-section {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .section-header h3 {
    margin: 0;
    font-size: 1rem;
    font-weight: 600;
  }

  .settings-group {
    padding: 1rem;
    background: var(--bg-secondary);
    border: 2px solid rgba(100, 116, 139, 0.5);
    border-radius: 0.5rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .settings-group label {
    font-size: 0.8rem;
    font-weight: 600;
    color: var(--text-secondary);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .length-control {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .slider {
    flex: 1;
    height: 6px;
    border-radius: 3px;
    background: var(--border-color);
    outline: none;
    -webkit-appearance: none;
  }

  .slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 18px;
    height: 18px;
    border-radius: 50%;
    background: var(--accent-color);
    cursor: pointer;
  }

  .slider::-moz-range-thumb {
    width: 18px;
    height: 18px;
    border-radius: 50%;
    background: var(--accent-color);
    cursor: pointer;
    border: none;
  }

  #lengthDisplay {
    font-weight: 700;
    color: var(--accent-color);
    min-width: 2rem;
    text-align: right;
  }

  .checkbox-group {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    padding: 1rem;
    background: var(--bg-secondary);
    border: 2px solid rgba(100, 116, 139, 0.5);
    border-radius: 0.5rem;
  }

  .checkbox {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    font-size: 0.9rem;
    color: var(--text-primary);
    cursor: pointer;
  }

  .checkbox input {
    cursor: pointer;
  }

  .button-group {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.75rem;
  }

  .btn {
    padding: 0.75rem 1rem;
    border: 2px solid var(--border-color);
    border-radius: 0.375rem;
    background: var(--bg-secondary);
    color: var(--text-primary);
    cursor: pointer;
    font-size: 0.9rem;
    font-weight: 600;
    transition: all 0.2s ease;
  }

  .btn:hover {
    border-color: var(--accent-color);
    background: var(--accent-color);
    color: white;
    transform: translateY(-1px);
  }

  .btn-primary {
    border-color: var(--accent-color);
    background: var(--accent-color);
    color: white;
  }

  .btn-primary:hover {
    opacity: 0.9;
  }

  .btn-secondary {
    border-color: var(--border-color);
  }

  .password-display-box {
    padding: 1.5rem;
    background: var(--bg-secondary);
    border: 2px solid rgba(100, 116, 139, 0.5);
    border-radius: 0.5rem;
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .password-display {
    flex: 1;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 1.1rem;
    font-weight: 700;
    color: var(--accent-color);
    word-break: break-all;
    min-height: 3rem;
    display: flex;
    align-items: center;
  }

  .copy-btn {
    padding: 0.75rem 1rem;
    border: 2px solid var(--accent-color);
    border-radius: 0.375rem;
    background: var(--accent-color);
    color: white;
    cursor: pointer;
    font-size: 0.9rem;
    font-weight: 600;
    transition: all 0.2s ease;
    white-space: nowrap;
  }

  .copy-btn:hover {
    opacity: 0.9;
  }

  .strength-meter {
    padding: 1rem;
    background: var(--bg-secondary);
    border: 2px solid rgba(100, 116, 139, 0.5);
    border-radius: 0.5rem;
  }

  .strength-label {
    font-size: 0.9rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--text-primary);
  }

  #strengthText {
    color: var(--accent-color);
  }

  .strength-bar {
    width: 100%;
    height: 8px;
    background: rgba(100, 116, 139, 0.2);
    border-radius: 4px;
    overflow: hidden;
  }

  .strength-fill {
    height: 100%;
    width: 0%;
    background: #ef4444;
    transition: width 0.3s ease, background-color 0.3s ease;
  }

  .strength-fill.weak { background: #ef4444; }
  .strength-fill.fair { background: #f59e0b; }
  .strength-fill.good { background: #eab308; }
  .strength-fill.strong { background: #84cc16; }
  .strength-fill.very-strong { background: #22c55e; }

  .history-list {
    border: 2px solid rgba(100, 116, 139, 0.5);
    border-radius: 0.5rem;
    background: var(--bg-secondary);
    padding: 0.75rem;
    max-height: 250px;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .empty-history {
    text-align: center;
    color: var(--text-secondary);
    padding: 1rem;
  }

  .history-item {
    padding: 0.5rem 0.75rem;
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-left: 3px solid var(--accent-color);
    border-radius: 0.25rem;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 0.8rem;
    word-break: break-all;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .history-item:hover {
    border-color: var(--accent-color);
    background: rgba(59, 130, 246, 0.05);
  }
</style>

<script is:inline>
  function initializePasswordGenerator() {
    const passwordLength = document.getElementById('passwordLength')
    const lengthDisplay = document.getElementById('lengthDisplay')
    const uppercase = document.getElementById('uppercase')
    const lowercase = document.getElementById('lowercase')
    const numbers = document.getElementById('numbers')
    const symbols = document.getElementById('symbols')
    const excludeAmbiguous = document.getElementById('excludeAmbiguous')
    const generateBtn = document.getElementById('generateBtn')
    const clearBtn = document.getElementById('clearBtn')
    const copyBtn = document.getElementById('copyBtn')
    const clearHistoryBtn = document.getElementById('clearHistoryBtn')
    const passwordDisplay = document.getElementById('passwordDisplay')
    const strengthBar = document.getElementById('strengthBar')
    const strengthText = document.getElementById('strengthText')
    const historyList = document.getElementById('historyList')

    let history = []

    const charSets = {
      uppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
      lowercase: 'abcdefghijklmnopqrstuvwxyz',
      numbers: '0123456789',
      symbols: '!@#$%^&*()_+-=[]{}|;:,.<>?'
    }

    const ambiguous = 'il1Lo0O'

    function updateLength() {
      lengthDisplay.textContent = passwordLength.value
    }

    function calculateStrength(pwd) {
      let score = 0
      if (pwd.length >= 8) score++
      if (pwd.length >= 12) score++
      if (pwd.length >= 16) score++
      if (/[a-z]/.test(pwd)) score++
      if (/[A-Z]/.test(pwd)) score++
      if (/[0-9]/.test(pwd)) score++
      if (/[^a-zA-Z0-9]/.test(pwd)) score++

      const levels = ['', 'weak', 'fair', 'good', 'strong', 'very-strong']
      const texts = ['—', 'Weak', 'Fair', 'Good', 'Strong', 'Very Strong']
      return { level: levels[Math.min(score, 5)], text: texts[Math.min(score, 5)] }
    }

    function generatePassword() {
      let chars = ''
      if (uppercase.checked) chars += charSets.uppercase
      if (lowercase.checked) chars += charSets.lowercase
      if (numbers.checked) chars += charSets.numbers
      if (symbols.checked) chars += charSets.symbols

      if (!chars) {
        alert('Select at least one character type')
        return
      }

      if (excludeAmbiguous.checked) {
        chars = chars.split('').filter(c => !ambiguous.includes(c)).join('')
      }

      let pwd = ''
      for (let i = 0; i < passwordLength.value; i++) {
        pwd += chars.charAt(Math.floor(Math.random() * chars.length))
      }

      passwordDisplay.textContent = pwd
      const strength = calculateStrength(pwd)
      strengthBar.className = `strength-fill ${strength.level}`
      strengthText.textContent = strength.text

      history.unshift(pwd)
      if (history.length > 20) history.pop()
      renderHistory()
    }

    function renderHistory() {
      if (history.length === 0) {
        historyList.innerHTML = '<div class="empty-history">No passwords generated yet</div>'
        return
      }
      historyList.innerHTML = history.map(pwd => `<div class="history-item" data-pwd="${pwd}">${pwd}</div>`).join('')
      document.querySelectorAll('.history-item').forEach(item => {
        item.addEventListener('click', async () => {
          const pwd = item.getAttribute('data-pwd')
          try {
            await navigator.clipboard.writeText(pwd)
            item.textContent = '✓ Copied'
            setTimeout(() => { item.textContent = pwd }, 1500)
          } catch (e) {}
        })
      })
    }

    function clearHistory() {
      history = []
      renderHistory()
    }

    function clearAll() {
      passwordDisplay.textContent = '-'
      strengthBar.className = 'strength-fill'
      strengthText.textContent = '—'
    }

    async function copyPassword() {
      if (passwordDisplay.textContent === '-') return
      try {
        await navigator.clipboard.writeText(passwordDisplay.textContent)
        copyBtn.textContent = '✓ Copied'
        setTimeout(() => { copyBtn.textContent = 'Copy' }, 1500)
      } catch (e) {}
    }

    passwordLength?.addEventListener('input', updateLength)
    generateBtn?.addEventListener('click', generatePassword)
    clearBtn?.addEventListener('click', clearAll)
    copyBtn?.addEventListener('click', copyPassword)
    clearHistoryBtn?.addEventListener('click', clearHistory)
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializePasswordGenerator)
  } else {
    setTimeout(initializePasswordGenerator, 100)
  }
</script>
