---
import ToolLayout from '@/layouts/ToolLayout.astro'
---

<ToolLayout title="JSON Formatter" description="Format, validate, and minify JSON with syntax highlighting">

    <div class="shortcuts-info">
      <p><strong>Keyboard shortcuts:</strong> Ctrl/Cmd+Enter to format</p>
    </div>

    <div class="formatter-container">
      <div class="input-section">
        <div class="section-header">
          <h3>Input</h3>
          <button id="clearInputBtn" class="btn btn-secondary">Clear</button>
        </div>
        <textarea id="jsonInput" placeholder="Paste your JSON here or use the example below..." class="json-textarea"></textarea>
        <button id="loadExampleBtn" class="btn btn-secondary" style="align-self: flex-start;">Load Example</button>
      </div>

      <div class="controls">
        <button id="formatBtn" class="btn btn-primary">Format</button>
        <button id="minifyBtn" class="btn btn-secondary">Minify</button>
        <button id="validateBtn" class="btn btn-secondary">Validate</button>
      </div>

      <div class="output-section">
        <div class="section-header">
          <h3>Output</h3>
          <button id="copyOutputBtn" class="btn btn-secondary">Copy</button>
        </div>
        <textarea id="jsonOutput" placeholder="Formatted JSON will appear here..." class="json-textarea" readonly></textarea>
        <div id="statusMessage" class="status-message"></div>
      </div>
    </div>
</ToolLayout>

<style>
  .shortcuts-info {
    padding: 0.75rem 1rem;
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 0.375rem;
    font-size: 0.9rem;
    margin-bottom: 1rem;
  }

  .shortcuts-info p {
    margin: 0;
  }

  .formatter-container {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    margin-top: 2rem;
  }

  @media (min-width: 1024px) {
    .formatter-container {
      display: grid;
      grid-template-columns: 1fr 1fr;
      grid-template-rows: auto auto auto;
      gap: 1.5rem;
    }

    .input-section {
      grid-column: 1;
      grid-row: 1 / 3;
    }

    .output-section {
      grid-column: 2;
      grid-row: 1 / 3;
    }

    .controls {
      grid-column: 1 / -1;
      grid-row: 3;
    }
  }

  .input-section,
  .output-section {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .section-header h3 {
    margin: 0;
    font-size: 1rem;
    font-weight: 600;
  }

  .json-textarea {
    width: 100%;
    min-height: 300px;
    padding: 1rem;
    border: 2px solid rgba(100, 116, 139, 0.5);
    border-radius: 0.5rem;
    background: var(--bg-secondary);
    color: var(--text-primary);
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 0.9rem;
    line-height: 1.5;
    resize: vertical;
    transition: border-color 0.2s ease;
  }

  .json-textarea:focus {
    outline: none;
    border-color: var(--accent-color);
  }

  .controls {
    display: flex;
    gap: 0.75rem;
    flex-wrap: wrap;
  }

  .btn {
    padding: 0.5rem 1rem;
    border: 1px solid var(--border-color);
    border-radius: 0.375rem;
    background: var(--bg-secondary);
    color: var(--text-primary);
    cursor: pointer;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .btn:hover {
    border-color: var(--accent-color);
    background: var(--accent-color);
    color: white;
  }

  .btn-primary {
    border-color: var(--accent-color);
    background: var(--accent-color);
    color: white;
  }

  .btn-primary:hover {
    opacity: 0.9;
  }

  .status-message {
    margin-top: 0.5rem;
    padding: 0.75rem 1rem;
    border-radius: 0.375rem;
    font-size: 0.9rem;
    min-height: 1.5rem;
  }

  .status-message.success {
    background: rgba(34, 197, 94, 0.1);
    color: rgb(34, 197, 94);
    border: 1px solid rgba(34, 197, 94, 0.3);
  }

  .status-message.error {
    background: rgba(239, 68, 68, 0.1);
    color: rgb(239, 68, 68);
    border: 1px solid rgba(239, 68, 68, 0.3);
  }
</style>

<script is:inline>
  function initializeFormatter() {
    const jsonInput = document.getElementById('jsonInput')
    const jsonOutput = document.getElementById('jsonOutput')
    const statusMessage = document.getElementById('statusMessage')
    const formatBtn = document.getElementById('formatBtn')
    const minifyBtn = document.getElementById('minifyBtn')
    const validateBtn = document.getElementById('validateBtn')
    const clearInputBtn = document.getElementById('clearInputBtn')
    const copyOutputBtn = document.getElementById('copyOutputBtn')
    const loadExampleBtn = document.getElementById('loadExampleBtn')

    const exampleJSON = {
      name: 'John Doe',
      email: 'john@example.com',
      age: 30,
      isActive: true,
      skills: ['JavaScript', 'TypeScript', 'React', 'Astro'],
      address: {
        street: '123 Main St',
        city: 'San Francisco',
        country: 'USA',
        zipCode: '94105'
      }
    }

    function showStatus(message, type) {
      statusMessage.textContent = message
      statusMessage.className = `status-message ${type}`
      setTimeout(() => {
        statusMessage.textContent = ''
        statusMessage.className = 'status-message'
      }, 3000)
    }

    function formatJSON() {
      try {
        const input = jsonInput.value.trim()
        if (!input) {
          showStatus('Please enter JSON', 'error')
          return
        }
        const parsed = JSON.parse(input)
        jsonOutput.value = JSON.stringify(parsed, null, 2)
        showStatus('JSON formatted successfully', 'success')
      } catch (error) {
        showStatus(`Invalid JSON: ${error instanceof Error ? error.message : 'Unknown error'}`, 'error')
      }
    }

    function minifyJSON() {
      try {
        const input = jsonInput.value.trim()
        if (!input) {
          showStatus('Please enter JSON', 'error')
          return
        }
        const parsed = JSON.parse(input)
        jsonOutput.value = JSON.stringify(parsed)
        showStatus('JSON minified successfully', 'success')
      } catch (error) {
        showStatus(`Invalid JSON: ${error instanceof Error ? error.message : 'Unknown error'}`, 'error')
      }
    }

    function validateJSON() {
      try {
        const input = jsonInput.value.trim()
        if (!input) {
          showStatus('Please enter JSON', 'error')
          return
        }
        JSON.parse(input)
        showStatus('JSON is valid', 'success')
      } catch (error) {
        showStatus(`Invalid JSON: ${error instanceof Error ? error.message : 'Unknown error'}`, 'error')
      }
    }

    function clearInput() {
      jsonInput.value = ''
      jsonOutput.value = ''
      statusMessage.textContent = ''
      jsonInput.focus()
    }

    async function copyOutput() {
      try {
        if (!jsonOutput.value) {
          showStatus('Nothing to copy', 'error')
          return
        }
        await navigator.clipboard.writeText(jsonOutput.value)
        showStatus('Copied to clipboard', 'success')
      } catch (error) {
        showStatus('Failed to copy', 'error')
      }
    }

    function loadExample() {
      jsonInput.value = JSON.stringify(exampleJSON, null, 2)
      jsonOutput.value = ''
      statusMessage.textContent = ''
      showStatus('Example loaded', 'success')
      jsonInput.focus()
    }

    formatBtn?.addEventListener('click', formatJSON)
    minifyBtn?.addEventListener('click', minifyJSON)
    validateBtn?.addEventListener('click', validateJSON)
    clearInputBtn?.addEventListener('click', clearInput)
    copyOutputBtn?.addEventListener('click', copyOutput)
    loadExampleBtn?.addEventListener('click', loadExample)

    // Allow Ctrl+Enter to format
    jsonInput?.addEventListener('keydown', (e) => {
      if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
        formatJSON()
      }
    })
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeFormatter)
  } else {
    initializeFormatter()
  }
</script>
