---
import ToolLayout from '@/layouts/ToolLayout.astro'
---

<ToolLayout title="D&D Dice Roller" description="Roll dice with statistics and history tracking">

    <div class="dice-container">
      <div class="roller-section">
        <div class="section-header">
          <h3>Dice Roller</h3>
        </div>
        
        <div class="dice-input-group">
          <div class="input-field">
            <label for="diceCount">Count</label>
            <input id="diceCount" type="number" min="1" max="100" value="1" class="number-input" />
          </div>
          <span class="separator">d</span>
          <div class="input-field">
            <label for="diceSides">Sides</label>
            <select id="diceSides" class="select-input">
              <option value="4">d4</option>
              <option value="6">d6</option>
              <option value="8">d8</option>
              <option value="10">d10</option>
              <option value="12">d12</option>
              <option value="20" selected>d20</option>
              <option value="100">d100</option>
            </select>
          </div>
          <div class="input-field">
            <label for="diceModifier">Modifier</label>
            <input id="diceModifier" type="number" value="0" class="number-input" />
          </div>
        </div>

        <div class="quick-buttons">
          <button id="rollD20Btn" class="btn btn-primary">Roll d20</button>
          <button id="rollD20AdvBtn" class="btn btn-secondary" title="Roll twice, take higher">Roll d20 (Advantage)</button>
          <button id="rollD20DisadvBtn" class="btn btn-secondary" title="Roll twice, take lower">Roll d20 (Disadvantage)</button>
          <button id="rollCustomBtn" class="btn btn-primary">Roll Custom</button>
        </div>

        <div id="rollResult" class="roll-result">
          <div class="result-display">
            <div id="resultValue" class="result-value">-</div>
            <div id="resultBreakdown" class="result-breakdown"></div>
          </div>
        </div>
      </div>

      <div class="stats-section">
        <div class="section-header">
          <h3>Statistics</h3>
          <button id="clearStatsBtn" class="btn btn-secondary">Clear</button>
        </div>
        
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-label">Total Rolls</div>
            <div id="totalRolls" class="stat-value">0</div>
          </div>
          <div class="stat-card">
            <div class="stat-label">Average</div>
            <div id="avgRoll" class="stat-value">-</div>
          </div>
          <div class="stat-card">
            <div class="stat-label">Highest</div>
            <div id="highestRoll" class="stat-value">-</div>
          </div>
          <div class="stat-card">
            <div class="stat-label">Lowest</div>
            <div id="lowestRoll" class="stat-value">-</div>
          </div>
        </div>

        <div class="history-section">
          <div class="section-header">
            <h3>Roll History</h3>
            <button id="clearHistoryBtn" class="btn btn-secondary">Clear</button>
          </div>
          <div id="historyList" class="history-list">
            <div class="empty-history">No rolls yet</div>
          </div>
        </div>
      </div>
    </div>

    <div class="reference-section">
      <h4>Common Rolls</h4>
      <div class="reference-grid">
        <div class="ref-item">
          <strong>d20</strong> - Attack rolls, ability checks
        </div>
        <div class="ref-item">
          <strong>2d6</strong> - Fireball damage
        </div>
        <div class="ref-item">
          <strong>3d8</strong> - Healing spell
        </div>
        <div class="ref-item">
          <strong>1d4</strong> - Dagger damage
        </div>
        <div class="ref-item">
          <strong>1d6</strong> - Shortsword damage
        </div>
        <div class="ref-item">
          <strong>1d8</strong> - Longsword damage
        </div>
      </div>
    </div>
</ToolLayout>

<style>
  .dice-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    margin-top: 2rem;
  }

  @media (max-width: 1024px) {
    .dice-container {
      grid-template-columns: 1fr;
    }
  }

  .roller-section,
  .stats-section {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .section-header h3 {
    margin: 0;
    font-size: 1rem;
    font-weight: 600;
  }

  .section-header h4 {
    margin: 0;
    font-size: 0.9rem;
    font-weight: 600;
  }

  .dice-input-group {
    display: flex;
    align-items: flex-end;
    gap: 1rem;
    padding: 1rem;
    background: var(--bg-secondary);
    border: 2px solid rgba(100, 116, 139, 0.5);
    border-radius: 0.5rem;
  }

  .input-field {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    flex: 1;
  }

  .input-field label {
    font-size: 0.8rem;
    font-weight: 600;
    color: var(--text-secondary);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .number-input,
  .select-input {
    padding: 0.5rem;
    border: 1px solid var(--border-color);
    border-radius: 0.375rem;
    background: var(--bg-primary);
    color: var(--text-primary);
    font-size: 0.9rem;
    font-weight: 600;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  }

  .number-input:focus,
  .select-input:focus {
    outline: none;
    border-color: var(--accent-color);
  }

  .separator {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: 0.5rem;
  }

  .quick-buttons {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.75rem;
  }

  .btn {
    padding: 0.75rem 1rem;
    border: 2px solid var(--border-color);
    border-radius: 0.375rem;
    background: var(--bg-secondary);
    color: var(--text-primary);
    cursor: pointer;
    font-size: 0.9rem;
    font-weight: 600;
    transition: all 0.2s ease;
  }

  .btn:hover {
    border-color: var(--accent-color);
    background: var(--accent-color);
    color: white;
    transform: translateY(-1px);
  }

  .btn-primary {
    border-color: var(--accent-color);
    background: var(--accent-color);
    color: white;
  }

  .btn-primary:hover {
    opacity: 0.9;
  }

  .btn-secondary {
    border-color: var(--border-color);
  }

  .roll-result {
    padding: 1.5rem;
    background: var(--bg-secondary);
    border: 2px solid rgba(100, 116, 139, 0.5);
    border-radius: 0.5rem;
    min-height: 120px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .result-display {
    text-align: center;
    width: 100%;
  }

  .result-value {
    font-size: 3.5rem;
    font-weight: 700;
    color: var(--accent-color);
    margin-bottom: 0.5rem;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  }

  .result-breakdown {
    font-size: 0.9rem;
    color: var(--text-secondary);
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }

  .stat-card {
    padding: 1rem;
    background: var(--bg-secondary);
    border: 2px solid rgba(100, 116, 139, 0.5);
    border-radius: 0.5rem;
    text-align: center;
  }

  .stat-label {
    font-size: 0.85rem;
    color: var(--text-secondary);
    margin-bottom: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .stat-value {
    font-size: 1.75rem;
    font-weight: 700;
    color: var(--accent-color);
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  }

  .history-section {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .history-list {
    border: 2px solid rgba(100, 116, 139, 0.5);
    border-radius: 0.5rem;
    background: var(--bg-secondary);
    max-height: 300px;
    overflow-y: auto;
    padding: 0.75rem;
  }

  .empty-history {
    padding: 2rem 1rem;
    text-align: center;
    color: var(--text-secondary);
    font-size: 0.9rem;
  }

  .history-item {
    padding: 0.75rem;
    background: var(--bg-primary);
    border-radius: 0.375rem;
    margin-bottom: 0.5rem;
    font-size: 0.85rem;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    border-left: 3px solid var(--accent-color);
  }

  .history-item:last-child {
    margin-bottom: 0;
  }

  .history-roll {
    font-weight: 600;
    color: var(--accent-color);
  }

  .history-result {
    color: var(--text-secondary);
    font-size: 0.8rem;
  }

  .reference-section {
    margin-top: 2rem;
    padding: 1rem;
    background: var(--bg-secondary);
    border: 2px solid rgba(100, 116, 139, 0.5);
    border-radius: 0.5rem;
  }

  .reference-section h4 {
    margin-top: 0;
  }

  .reference-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 0.75rem;
    margin-top: 0.75rem;
  }

  .ref-item {
    padding: 0.5rem;
    background: var(--bg-primary);
    border-radius: 0.25rem;
    font-size: 0.85rem;
    border: 1px solid var(--border-color);
  }

  .ref-item strong {
    color: var(--accent-color);
  }
</style>

<script is:inline>
  function initializeDiceRoller() {
    const diceCount = document.getElementById('diceCount')
    const diceSides = document.getElementById('diceSides')
    const diceModifier = document.getElementById('diceModifier')
    const resultValue = document.getElementById('resultValue')
    const resultBreakdown = document.getElementById('resultBreakdown')
    const historyList = document.getElementById('historyList')
    const emptyHistory = document.querySelector('.empty-history')
    const totalRolls = document.getElementById('totalRolls')
    const avgRoll = document.getElementById('avgRoll')
    const highestRoll = document.getElementById('highestRoll')
    const lowestRoll = document.getElementById('lowestRoll')
    const rollD20Btn = document.getElementById('rollD20Btn')
    const rollD20AdvBtn = document.getElementById('rollD20AdvBtn')
    const rollD20DisadvBtn = document.getElementById('rollD20DisadvBtn')
    const rollCustomBtn = document.getElementById('rollCustomBtn')
    const clearHistoryBtn = document.getElementById('clearHistoryBtn')
    const clearStatsBtn = document.getElementById('clearStatsBtn')

    let rolls = []

    function rollDice(count, sides) {
      const results = []
      for (let i = 0; i < count; i++) {
        results.push(Math.floor(Math.random() * sides) + 1)
      }
      return results
    }

    function updateStats() {
      if (rolls.length === 0) {
        totalRolls.textContent = '0'
        avgRoll.textContent = '-'
        highestRoll.textContent = '-'
        lowestRoll.textContent = '-'
        return
      }

      const sum = rolls.reduce((a, b) => a + b, 0)
      const avg = (sum / rolls.length).toFixed(1)
      const max = Math.max(...rolls)
      const min = Math.min(...rolls)

      totalRolls.textContent = rolls.length
      avgRoll.textContent = avg
      highestRoll.textContent = max
      lowestRoll.textContent = min
    }

    function addToHistory(roll, total, description) {
      rolls.push(total)
      
      if (emptyHistory) {
        emptyHistory.remove()
      }

      const item = document.createElement('div')
      item.className = 'history-item'
      item.innerHTML = `
        <div class="history-roll">${description}</div>
        <div class="history-result">Rolled: ${roll.join(', ')} = ${total}</div>
      `
      
      historyList.insertBefore(item, historyList.firstChild)
      
      // Keep only last 20 rolls
      const items = historyList.querySelectorAll('.history-item')
      if (items.length > 20) {
        items[items.length - 1].remove()
      }

      updateStats()
    }

    function performRoll(count, sides, modifier, description) {
      const roll = rollDice(count, sides)
      const sum = roll.reduce((a, b) => a + b, 0)
      const total = sum + modifier

      resultValue.textContent = total
      
      const modText = modifier !== 0 ? ` ${modifier > 0 ? '+' : ''}${modifier}` : ''
      resultBreakdown.textContent = `${count}d${sides}${modText}: [${roll.join(', ')}] = ${sum}${modText}`

      addToHistory(roll, total, description)
    }

    function rollCustom() {
      const count = Math.max(1, Math.min(100, parseInt(diceCount.value) || 1))
      const sides = parseInt(diceSides.value) || 20
      const modifier = parseInt(diceModifier.value) || 0
      
      performRoll(count, sides, modifier, `${count}d${sides}${modifier !== 0 ? ` ${modifier > 0 ? '+' : ''}${modifier}` : ''}`)
    }

    function rollD20() {
      performRoll(1, 20, 0, 'd20')
    }

    function rollD20Advantage() {
      const roll1 = Math.floor(Math.random() * 20) + 1
      const roll2 = Math.floor(Math.random() * 20) + 1
      const total = Math.max(roll1, roll2)

      resultValue.textContent = total
      resultBreakdown.textContent = `d20 Advantage: [${roll1}, ${roll2}] = ${total} (taking higher)`

      rolls.push(total)
      if (emptyHistory) {
        emptyHistory.remove()
      }

      const item = document.createElement('div')
      item.className = 'history-item'
      item.innerHTML = `
        <div class="history-roll">d20 Advantage</div>
        <div class="history-result">Rolled: [${roll1}, ${roll2}] = ${total}</div>
      `
      
      historyList.insertBefore(item, historyList.firstChild)
      
      const items = historyList.querySelectorAll('.history-item')
      if (items.length > 20) {
        items[items.length - 1].remove()
      }

      updateStats()
    }

    function rollD20Disadvantage() {
      const roll1 = Math.floor(Math.random() * 20) + 1
      const roll2 = Math.floor(Math.random() * 20) + 1
      const total = Math.min(roll1, roll2)

      resultValue.textContent = total
      resultBreakdown.textContent = `d20 Disadvantage: [${roll1}, ${roll2}] = ${total} (taking lower)`

      rolls.push(total)
      if (emptyHistory) {
        emptyHistory.remove()
      }

      const item = document.createElement('div')
      item.className = 'history-item'
      item.innerHTML = `
        <div class="history-roll">d20 Disadvantage</div>
        <div class="history-result">Rolled: [${roll1}, ${roll2}] = ${total}</div>
      `
      
      historyList.insertBefore(item, historyList.firstChild)
      
      const items = historyList.querySelectorAll('.history-item')
      if (items.length > 20) {
        items[items.length - 1].remove()
      }

      updateStats()
    }

    function clearHistory() {
      rolls = []
      historyList.innerHTML = '<div class="empty-history">No rolls yet</div>'
      updateStats()
    }

    rollD20Btn?.addEventListener('click', rollD20)
    rollD20AdvBtn?.addEventListener('click', rollD20Advantage)
    rollD20DisadvBtn?.addEventListener('click', rollD20Disadvantage)
    rollCustomBtn?.addEventListener('click', rollCustom)
    clearHistoryBtn?.addEventListener('click', clearHistory)
    clearStatsBtn?.addEventListener('click', clearHistory)

    // Initial stats display
    updateStats()
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeDiceRoller)
  } else {
    initializeDiceRoller()
  }
</script>
