---
import { getEntry } from 'astro:content'
import { render } from 'astro:content'

const projectsEntry = await getEntry('projects', 'projects')
const hasContent = projectsEntry?.body
  ? projectsEntry.body.replace(/<!--[\s\S]*?-->/g, '').trim().length > 0
  : false
const { Content } = hasContent && projectsEntry ? await render(projectsEntry) : { Content: null }

const projects = projectsEntry?.body
  .split('---')
  .filter(section => section.trim().length > 0)
  .map(section => {
    const lines = section.trim().split('\n')
    const title = lines[0]?.replace(/^###\s*/, '').trim()
    
    let techStack = ''
    let impact = ''
    let status = ''
    let blogPost = ''
    let description = ''
    
    for (let i = 1; i < lines.length; i++) {
      const line = lines[i].trim()
      if (line.startsWith('**Tech Stack:**')) {
        techStack = line.replace('**Tech Stack:**', '').trim()
      } else if (line.startsWith('**Impact:**')) {
        impact = line.replace('**Impact:**', '').trim()
      } else if (line.startsWith('**Status:**')) {
        status = line.replace('**Status:**', '').trim()
      } else if (line.startsWith('**Blog Post:**')) {
        const match = line.match(/\[([^\]]+)\]\(([^)]+)\)/)
        if (match) {
          blogPost = match[2]
        }
      } else if (line && !line.startsWith('**')) {
        description += line + ' '
      }
    }
    
    return {
      title,
      techStack,
      impact,
      status,
      blogPost,
      description: description.trim()
    }
  })
  .filter(p => p.title)
---

{hasContent && Content && (
  <div class="projects-container">
    <h1>Projects</h1>
    <p class="subtitle">Building products that create leverage and compound impact</p>
    
    <div class="projects-grid">
      {projects.map((project) => {
        const cardContent = (
          <>
            <div class="card-header">
              <h3>{project.title}</h3>
              <span class={`status status-${project.status.toLowerCase()}`}>
                {project.status}
              </span>
            </div>
            
            <p class="description">{project.description}</p>
            
            <div class="project-meta">
              <div class="meta-item">
                <span class="meta-label">Tech Stack</span>
                <span class="meta-value">{project.techStack}</span>
              </div>
              
              {project.impact && (
                <div class="meta-item">
                  <span class="meta-label">Impact</span>
                  <span class="meta-value impact-text">{project.impact}</span>
                </div>
              )}
            </div>
            
            {project.blogPost && (
              <span class="blog-link">
                Read Case Study â†’
              </span>
            )}
          </>
        )
        
        return project.blogPost ? (
          <a href={project.blogPost} class="project-card project-card-link">
            {cardContent}
          </a>
        ) : (
          <div class="project-card">
            {cardContent}
          </div>
        )
      })}
    </div>
  </div>
)}

<style>
  .projects-container {
    margin-top: 2rem;
  }
  
  h1 {
    margin-bottom: 0.5rem;
    font-size: 2rem;
    font-weight: 700;
  }
  
  .subtitle {
    margin-bottom: 3rem;
    color: var(--text-secondary);
    font-size: 1.1rem;
  }
  
  .projects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(min(100%, 320px), 1fr));
    gap: 1.5rem;
    margin-bottom: 3rem;
  }
  
  .project-card {
    background: var(--card-bg, rgba(0, 0, 0, 0.02));
    border: 1px solid var(--border, rgba(0, 0, 0, 0.1));
    border-radius: 12px;
    padding: 1.5rem;
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .project-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);
    border-color: var(--accent, #3b82f6);
  }
  
  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 1rem;
  }
  
  .card-header h3 {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
    flex: 1;
    line-height: 1.3;
  }
  
  .status {
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    white-space: nowrap;
    flex-shrink: 0;
  }
  
  .status-active {
    background: rgba(16, 185, 129, 0.1);
    color: #10b981;
  }
  
  .status-production {
    background: rgba(59, 130, 246, 0.1);
    color: #3b82f6;
  }
  
  .status-completed {
    background: rgba(107, 114, 128, 0.1);
    color: #6b7280;
  }
  
  .description {
    margin: 0;
    color: var(--text-secondary);
    line-height: 1.6;
    font-size: 0.95rem;
  }
  
  .project-meta {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    padding-top: 0.5rem;
    border-top: 1px solid var(--border, rgba(0, 0, 0, 0.05));
  }
  
  .meta-item {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }
  
  .meta-label {
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    color: var(--text-tertiary);
  }
  
  .meta-value {
    font-size: 0.875rem;
    color: var(--text-secondary);
    line-height: 1.5;
  }
  
  .impact-text {
    color: #10b981;
    font-weight: 500;
  }
  
  .project-card-link {
    text-decoration: none;
    color: inherit;
    cursor: pointer;
  }
  
  .blog-link {
    display: inline-flex;
    align-items: center;
    color: var(--accent, #3b82f6);
    text-decoration: none;
    font-weight: 500;
    font-size: 0.9rem;
    margin-top: 0.5rem;
    transition: all 0.2s ease;
  }
  
  .project-card-link .blog-link {
    color: var(--accent, #3b82f6);
  }
  
  .project-card-link:hover .blog-link {
    color: var(--accent-hover, #2563eb);
    transform: translateX(4px);
  }
  
  /* Dark mode support */
  :global([data-theme="dark"]) .project-card {
    background: rgba(255, 255, 255, 0.03);
    border-color: rgba(255, 255, 255, 0.1);
  }
  
  :global([data-theme="dark"]) .project-card:hover {
    background: rgba(255, 255, 255, 0.05);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
  }
  
  :global([data-theme="dark"]) .project-meta {
    border-top-color: rgba(255, 255, 255, 0.1);
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .projects-grid {
      grid-template-columns: 1fr;
      gap: 1.25rem;
    }
    
    h1 {
      font-size: 1.75rem;
    }
    
    .subtitle {
      font-size: 1rem;
      margin-bottom: 2rem;
    }
    
    .project-card {
      padding: 1.25rem;
    }
  }
  
  @media (min-width: 769px) and (max-width: 1024px) {
    .projects-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
</style>
